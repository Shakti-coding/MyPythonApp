name: Build Android APK

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Set up Java JDK
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Install system dependencies
      run: |
        sudo apt-get update -q
        sudo apt-get install -y \
          build-essential git python3 python3-dev python3-pip python3-setuptools python3-wheel python3-venv \
          ffmpeg libssl-dev libffi-dev libncurses5-dev libncursesw5-dev cmake libfreetype6-dev \
          libgl1-mesa-dev libgles2-mesa-dev libdrm-dev libxkbcommon-dev libegl1-mesa-dev libwayland-dev \
          libxrandr-dev libxss-dev libxcursor-dev libxcomposite-dev libasound2-dev libxi-dev libxtst-dev \
          zip unzip autoconf libtool pkg-config zlib1g-dev openjdk-17-jdk ccache lld llvm wget

    - name: Install Android SDK cmdline-tools
      run: |
        mkdir -p $HOME/android-sdk/cmdline-tools
        cd $HOME/android-sdk/cmdline-tools
        wget https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip -O tools.zip
        unzip tools.zip
        mv cmdline-tools latest

        export ANDROID_HOME=$HOME/android-sdk
        export ANDROID_SDK_ROOT=$HOME/android-sdk
        export PATH=$ANDROID_HOME/cmdline-tools/latest/bin:$PATH
        export PATH=$ANDROID_HOME/platform-tools:$PATH

        yes | sdkmanager --licenses
        sdkmanager "platform-tools" "platforms;android-31" "build-tools;31.0.0" "ndk;25.1.8937393"

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install buildozer==1.5.0 cython==0.29.33
        pip install kivy[base]==2.2.0 flask werkzeug requests yt-dlp

    - name: Cache Buildozer global directory
      uses: actions/cache@v4
      with:
        path: .buildozer_global
        key: buildozer-global-${{ hashFiles('buildozer.spec') }}
        restore-keys: |
          buildozer-global-

    - name: Cache Buildozer directory
      uses: actions/cache@v4
      with:
        path: .buildozer
        key: buildozer-${{ hashFiles('buildozer.spec') }}
        restore-keys: |
          buildozer-

    - name: Build APK with Buildozer
      run: |
        export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
        export ANDROID_HOME=$HOME/android-sdk
        export ANDROID_SDK_ROOT=$ANDROID_HOME
        export ANDROIDAPI=31
        export ANDROIDMINAPI=21
        export ANDROIDNDK=$ANDROID_HOME/ndk/25.1.8937393
        export PATH=$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$JAVA_HOME/bin:$PATH

        # Force ignore GitHub runner's preinstalled SDK/NDK
        unset ANDROID_NDK_HOME
        unset ANDROID_NDK_ROOT
        unset ANDROID_NDK_LATEST_HOME

        # Accept licenses again just in case
        yes | sdkmanager --licenses

        # Run build
        buildozer android debug

    - name: List build output
      run: |
        echo "APK build output:"
        ls -la bin/ || echo "No bin directory found"
        find . -name "*.apk" -type f || echo "No APK files found"

    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: android-apk
        path: bin/*.apk
        retention-days: 30

    - name: Upload alternative debug APK
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: debug-apk-alternative
        path: .buildozer/android/platform/build-**/outputs/apk/debug/*.apk
        retention-days: 30
