
name: Build Android APK

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 90

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Set up Java JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Install system dependencies
        run: |
          sudo apt-get update -q
          sudo apt-get install -y \
            build-essential git python3 python3-dev python3-pip python3-setuptools python3-wheel python3-venv \
            ffmpeg libssl-dev libffi-dev libncurses5-dev libncursesw5-dev cmake libfreetype6-dev \
            libgl1-mesa-dev libgles2-mesa-dev libdrm-dev libxkbcommon-dev libegl1-mesa-dev libwayland-dev \
            libxrandr-dev libxss-dev libxcursor-dev libxcomposite-dev libasound2-dev libxi-dev libxtst-dev \
            zip unzip autoconf automake libtool libtool-bin pkg-config zlib1g-dev ccache lld llvm wget \
            openjdk-17-jdk m4 texinfo gettext gperf autotools-dev autopoint

      - name: Install Android SDK cmdline-tools
        run: |
          # Clean preinstalled SDK/NDK
          sudo rm -rf /usr/local/lib/android || true
          sudo rm -rf $ANDROID_HOME || true
          
          mkdir -p $HOME/android-sdk/cmdline-tools
          cd $HOME/android-sdk/cmdline-tools
          wget https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip -O tools.zip
          unzip -q tools.zip
          mv cmdline-tools latest
          
          export ANDROID_HOME=$HOME/android-sdk
          export ANDROID_SDK_ROOT=$HOME/android-sdk
          export PATH=$ANDROID_HOME/cmdline-tools/latest/bin:$PATH
          export PATH=$ANDROID_HOME/platform-tools:$PATH
          
          yes | sdkmanager --licenses
          sdkmanager "platform-tools" "platforms;android-34" "build-tools;34.0.0" "ndk;26.3.11579264"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install buildozer==1.5.0 cython==0.29.33
          pip install kivy[base]==2.2.0 flask werkzeug requests

      - name: Cache Buildozer global directory
        uses: actions/cache@v4
        with:
          path: .buildozer_global
          key: buildozer-global-${{ hashFiles('buildozer.spec') }}-v3
          restore-keys: |
            buildozer-global-

      - name: Cache Buildozer directory
        uses: actions/cache@v4
        with:
          path: .buildozer
          key: buildozer-${{ hashFiles('buildozer.spec') }}-v3
          restore-keys: |
            buildozer-

      - name: Prepare comprehensive patches
        run: |
          # Create patches directory
          mkdir -p /tmp/patches
          
          # Enhanced libffi configure.ac patch
          cat > /tmp/patches/libffi-fix-autoconf.patch << 'EOF'
--- a/configure.ac
+++ b/configure.ac
@@ -5,7 +5,7 @@ AC_PREREQ(2.68)
 
 AC_INIT([libffi], [3.4.4], [http://github.com/libffi/libffi/issues])
 AC_CONFIG_HEADERS([fficonfig.h])
-AC_CANONICAL_SYSTEM
+AC_CANONICAL_TARGET
 AC_CONFIG_SRCDIR([src/prep_cif.c])
 
 # The same as in boehm-gc and autoconf
@@ -38,7 +38,7 @@ AM_PROG_AS
 AM_PROG_CC_C_O
 AC_PROG_LIBTOOL
 
-LT_SYS_SYMBOL_USCORE
+dnl LT_SYS_SYMBOL_USCORE
 
 # Test for 64-bit build.
 # The cast to long int works around a bug in the HP C Compiler
@@ -71,14 +71,14 @@ case "$host" in
 esac
 
 AC_CACHE_CHECK([whether .eh_frame section should be read-only],
-    libffi_cv_ro_eh_frame, [
+    [libffi_cv_ro_eh_frame], [
 	AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]], [[]])],[
 	    libffi_cv_ro_eh_frame=yes
 	],[
 	    libffi_cv_ro_eh_frame=no
 	])
     ])
-if test "x$libffi_cv_ro_eh_frame" = xyes; then
+if test "x$libffi_cv_ro_eh_frame" = "xyes"; then
     AC_DEFINE(HAVE_RO_EH_FRAME, 1,
 	      [Define if .eh_frame sections should be read-only.])
     AC_DEFINE(EH_FRAME_FLAGS, "a",
@@ -119,7 +119,7 @@ AC_ARG_ENABLE(structs,
 	structs=true)
 
 if test "$structs" = "true"; then
-  AC_CACHE_CHECK([whether FFI_TYPE_LONGDOUBLE is supported], libffi_cv_longdouble, [
+  AC_CACHE_CHECK([whether FFI_TYPE_LONGDOUBLE is supported], [libffi_cv_longdouble], [
 	AC_LINK_IFELSE([AC_LANG_PROGRAM([[
 #include <math.h>
 #include <stdio.h>
@@ -135,7 +135,7 @@ if test "$structs" = "true"; then
 	       libffi_cv_longdouble=no)
 fi
 
-AC_CACHE_CHECK([whether compiler supports pointer authentication], libffi_cv_as_ptrauth, [
+AC_CACHE_CHECK([whether compiler supports pointer authentication], [libffi_cv_as_ptrauth], [
 	AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]], [[
 #ifdef __clang__
 # if __has_feature(ptrauth_calls)
@@ -182,7 +182,7 @@ else
 fi
 
 if test $TARGET = MIPS; then
-	AC_CACHE_CHECK([whether .eh_frame section should be read-only], libffi_cv_ro_eh_frame, [
+	AC_CACHE_CHECK([whether .eh_frame section should be read-only], [libffi_cv_ro_eh_frame], [
 		libffi_cv_ro_eh_frame=yes
 		echo 'extern void foo (void); void bar (void) { foo (); foo (); }' > conftest.c
 		if $CC $CFLAGS -c -fpic -fexceptions -fno-lto -o conftest.o conftest.c > /dev/null 2>&1; then
@@ -307,7 +307,7 @@ AC_HEADER_STDC
 AC_CHECK_FUNCS(memcpy)
 AC_FUNC_ALLOCA
 
-AC_ARG_ENABLE(structs,
+AC_ARG_ENABLE([structs],
 [  --disable-structs       omit code for struct support],
 if test "$enable_structs" = "no"; then
   AC_DEFINE(FFI_NO_STRUCTS, 1, [Define this if you do not want support for aggregate types.])
@@ -415,7 +415,7 @@ case "${host}" in
   ;;
 esac
 
-AC_ARG_ENABLE(symvers,
+AC_ARG_ENABLE([symvers],
 [  --enable-symvers        enable symbol versioning],
 symvers=$enableval, symvers=yes)
 
EOF
          
          # Buildozer.spec auto-fixer patch
          cat > /tmp/patches/fix-buildozer-spec.patch << 'EOF'
--- a/buildozer.spec
+++ b/buildozer.spec
@@ -13,7 +13,7 @@ source.dir = .
 source.include_exts = py,txt,md
 
 # (str) Application version
-version = 0.1
+version = 1.0
 
 # (list) Application requirements (comma-separated)
 # include kivy + flask stack + networking
@@ -30,16 +30,16 @@ fullscreen = 0
 android.permissions = INTERNET,WRITE_EXTERNAL_STORAGE,READ_EXTERNAL_STORAGE
 
 # (int) Target Android API (must match installed SDK platform)
-android.api = 34
+android.api = 33
 
 # (int) Minimum API your APK will support
-android.minapi = 23
+android.minapi = 21
 
 # (str) Android NDK version (tested with 25b)
-android.ndk = 26b
+android.ndk = 25b
 
 # (bool) Use private app storage (default=True)
-android.private_storage = True
+android.private_storage = False
 
 # (str) Android archs to build for
 android.archs = arm64-v8a,armeabi-v7a
EOF

      - name: Auto-fix buildozer.spec for compatibility
        run: |
          # Apply buildozer.spec fixes for better compatibility
          if [ -f buildozer.spec ]; then
            # Update to more stable versions
            sed -i 's/android.api = 34/android.api = 33/' buildozer.spec
            sed -i 's/android.ndk = 26b/android.ndk = 25b/' buildozer.spec
            sed -i 's/android.minapi = 23/android.minapi = 21/' buildozer.spec
            sed -i 's/android.private_storage = True/android.private_storage = False/' buildozer.spec
            # Add essential p4a requirements if missing
            if ! grep -q "libffi" buildozer.spec; then
              sed -i 's/p4a.requirements = .*/&,libffi/' buildozer.spec
            fi
            echo "Updated buildozer.spec for compatibility"
          fi

      - name: Build APK with comprehensive error handling
        run: |
          export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
          export ANDROID_HOME=$HOME/android-sdk
          export ANDROID_SDK_ROOT=$ANDROID_HOME
          export ANDROIDAPI=33
          export ANDROIDMINAPI=21
          export ANDROIDNDK=$ANDROID_HOME/ndk/26.3.11579264
          export PATH=$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$JAVA_HOME/bin:$PATH
          
          # Clear conflicting environment variables
          unset ANDROID_NDK_HOME ANDROID_NDK_ROOT ANDROID_NDK_LATEST_HOME
          
          # Set autotools environment
          export ACLOCAL_PATH="/usr/share/aclocal:/usr/local/share/aclocal"
          export LIBTOOLIZE="libtoolize"
          export M4PATH="/usr/share/aclocal"
          export AUTORECONF="autoreconf"
          
          # Accept SDK licenses
          yes | sdkmanager --licenses
          
          # Initialize buildozer
          buildozer init || echo "Buildozer already initialized"
          
          # Function to apply comprehensive fixes
          apply_libffi_fixes() {
            echo "=== Applying comprehensive libffi fixes ==="
            
            # Find all libffi directories
            find .buildozer -type d -name "*libffi*" 2>/dev/null | while read libffi_dir; do
              echo "Processing libffi directory: $libffi_dir"
              
              if [ -f "$libffi_dir/configure.ac" ]; then
                echo "Backing up and patching configure.ac in $libffi_dir"
                cp "$libffi_dir/configure.ac" "$libffi_dir/configure.ac.backup"
                
                # Apply our comprehensive patch
                patch -p1 -d "$libffi_dir" < /tmp/patches/libffi-fix-autoconf.patch || {
                  echo "Patch failed, applying manual fixes..."
                  
                  # Manual fixes for configure.ac
                  sed -i 's/AC_CANONICAL_SYSTEM/AC_CANONICAL_TARGET/' "$libffi_dir/configure.ac"
                  sed -i 's/LT_SYS_SYMBOL_USCORE/dnl LT_SYS_SYMBOL_USCORE/' "$libffi_dir/configure.ac"
                  sed -i 's/AC_TRY_COMPILE/AC_COMPILE_IFELSE/' "$libffi_dir/configure.ac"
                  sed -i 's/AC_TRY_LINK/AC_LINK_IFELSE/' "$libffi_dir/configure.ac"
                  sed -i 's/AC_TRY_RUN/AC_RUN_IFELSE/' "$libffi_dir/configure.ac"
                  sed -i 's/AC_HELP_STRING/AS_HELP_STRING/' "$libffi_dir/configure.ac"
                  sed -i 's/AC_HEADER_STDC/AC_CHECK_HEADERS/' "$libffi_dir/configure.ac"
                  sed -i 's/AC_PROG_LIBTOOL/LT_INIT/' "$libffi_dir/configure.ac"
                }
                
                # Regenerate autotools files
                cd "$libffi_dir"
                echo "Regenerating autotools files in $libffi_dir"
                autoreconf -fiv || {
                  echo "autoreconf failed, trying alternative approach..."
                  aclocal -I m4 || true
                  autoconf || true
                  automake --add-missing --copy || true
                }
                cd - > /dev/null
              fi
            done
          }
          
          # Function to handle common build errors
          handle_build_errors() {
            local attempt=$1
            echo "=== Handling build errors for attempt $attempt ==="
            
            # Fix missing zlib headers
            if [ ! -f /usr/include/zlib.h ]; then
              sudo apt-get install -y zlib1g-dev
            fi
            
            # Fix Python headers
            sudo apt-get install -y python3-dev
            
            # Apply libffi fixes
            apply_libffi_fixes
            
            # Fix permissions
            find .buildozer -type f -name "configure" -exec chmod +x {} \; 2>/dev/null || true
            find .buildozer -type f -name "*.sh" -exec chmod +x {} \; 2>/dev/null || true
          }
          
          # Build with retries and progressive fixes
          for attempt in {1..5}; do
            echo "=== Build attempt $attempt ==="
            
            if [ $attempt -gt 1 ]; then
              handle_build_errors $attempt
            fi
            
            if timeout 3600 buildozer android debug --verbose; then
              echo "✅ Build successful on attempt $attempt"
              break
            else
              echo "❌ Build failed on attempt $attempt"
              
              if [ $attempt -eq 5 ]; then
                echo "🚨 All build attempts failed after comprehensive fixes"
                echo "=== Final error analysis ==="
                echo "Last buildozer log:"
                tail -50 .buildozer/*.log || echo "No buildozer logs found"
                exit 1
              else
                echo "🔄 Preparing for next attempt with additional fixes..."
                sleep 10
              fi
            fi
          done

      - name: List and verify build output
        run: |
          echo "==== Comprehensive APK search ===="
          find . -name "*.apk" -type f -exec ls -la {} \; || echo "No APK files found"
          
          echo "==== Directory structure ===="
          ls -la bin/ 2>/dev/null || echo "No bin directory"
          ls -la .buildozer/android/platform/build*/outputs/apk/debug/ 2>/dev/null || echo "No debug APK directory"
          ls -la .buildozer/android/platform/build*/bin/ 2>/dev/null || echo "No build bin directory"
          
          echo "==== Build summary ===="
          if find . -name "*.apk" -type f | grep -q .; then
            echo "✅ APK build completed successfully!"
            find . -name "*.apk" -type f -exec echo "📱 Found APK: {}" \;
          else
            echo "❌ No APK found - build may have failed"
          fi

      - name: Upload APK artifacts (multiple locations)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: android-apk-all-locations
          path: |
            bin/*.apk
            .buildozer/android/platform/build*/outputs/apk/debug/*.apk
            .buildozer/android/platform/build*/bin/*.apk
            **/*.apk
          if-no-files-found: ignore
          retention-days: 30

      - name: Upload comprehensive build logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: comprehensive-build-logs
          path: |
            .buildozer/
            *.log
            /tmp/patches/
          if-no-files-found: ignore
          retention-days: 7

      - name: Build Status Summary
        if: always()
        run: |
          echo "=== BUILD SUMMARY ==="
          if find . -name "*.apk" -type f | grep -q .; then
            echo "🎉 SUCCESS: Android APK build completed!"
            echo "📱 Your installable app is ready for download from the artifacts section."
            echo "💡 The APK can be installed directly on Android devices without emulator."
          else
            echo "💥 FAILED: Build process completed but no APK was generated."
            echo "🔍 Check the build logs for detailed error information."
          fi
          echo "=================="
