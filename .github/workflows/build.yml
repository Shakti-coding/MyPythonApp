
name: Build Android APK

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Set up Java JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Install system dependencies
        run: |
          sudo apt-get update -q
          sudo apt-get install -y \
            build-essential git python3 python3-dev python3-pip python3-setuptools python3-wheel python3-venv \
            ffmpeg libssl-dev libffi-dev libncurses5-dev libncursesw5-dev cmake libfreetype6-dev \
            libgl1-mesa-dev libgles2-mesa-dev libdrm-dev libxkbcommon-dev libegl1-mesa-dev libwayland-dev \
            libxrandr-dev libxss-dev libxcursor-dev libxcomposite-dev libasound2-dev libxi-dev libxtst-dev \
            zip unzip autoconf automake libtool libtool-bin pkg-config zlib1g-dev ccache lld llvm wget \
            openjdk-17-jdk m4 texinfo gettext gperf

      - name: Install Android SDK cmdline-tools
        run: |
          # Clean GitHub runner preinstalled SDK/NDK (causes conflicts)
          sudo rm -rf /usr/local/lib/android || true
          sudo rm -rf $ANDROID_HOME || true
          
          mkdir -p $HOME/android-sdk/cmdline-tools
          cd $HOME/android-sdk/cmdline-tools
          wget https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip -O tools.zip
          unzip -q tools.zip
          mv cmdline-tools latest
          
          export ANDROID_HOME=$HOME/android-sdk
          export ANDROID_SDK_ROOT=$HOME/android-sdk
          export PATH=$ANDROID_HOME/cmdline-tools/latest/bin:$PATH
          export PATH=$ANDROID_HOME/platform-tools:$PATH
          
          yes | sdkmanager --licenses
          sdkmanager "platform-tools" "platforms;android-34" "build-tools;34.0.0" "ndk;26.3.11579264"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install buildozer==1.5.0 cython==0.29.33
          pip install kivy[base]==2.2.0 flask werkzeug requests

      - name: Cache Buildozer global directory
        uses: actions/cache@v4
        with:
          path: .buildozer_global
          key: buildozer-global-${{ hashFiles('buildozer.spec') }}-v2
          restore-keys: |
            buildozer-global-

      - name: Cache Buildozer directory
        uses: actions/cache@v4
        with:
          path: .buildozer
          key: buildozer-${{ hashFiles('buildozer.spec') }}-v2
          restore-keys: |
            buildozer-

      - name: Prepare libffi patch
        run: |
          # Create a patch directory for libffi fixes
          mkdir -p /tmp/libffi-patches
          cat > /tmp/libffi-patches/fix-autoconf.patch << 'EOF'
          --- a/configure.ac
          +++ b/configure.ac
          @@ -119,7 +119,7 @@ AC_ARG_ENABLE(structs,
           	structs=true)
           
           if test "$structs" = "true"; then
          -  AC_CACHE_CHECK([whether FFI_TYPE_LONGDOUBLE is supported], libffi_cv_longdouble, [
          +  AC_CACHE_CHECK([whether FFI_TYPE_LONGDOUBLE is supported], [libffi_cv_longdouble], [
           	AC_LINK_IFELSE([AC_LANG_PROGRAM([[
           #include <math.h>
           #include <stdio.h>
          @@ -135,7 +135,7 @@ if test "$structs" = "true"; then
           	       libffi_cv_longdouble=no)
           fi
           
          -AC_CACHE_CHECK([whether compiler supports pointer authentication], libffi_cv_as_ptrauth, [
          +AC_CACHE_CHECK([whether compiler supports pointer authentication], [libffi_cv_as_ptrauth], [
           	AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]], [[
           #ifdef __clang__
           # if __has_feature(ptrauth_calls)
          @@ -182,7 +182,7 @@ else
           fi
           
           if test $TARGET = MIPS; then
          -	AC_CACHE_CHECK([whether .eh_frame section should be read-only], libffi_cv_ro_eh_frame, [
          +	AC_CACHE_CHECK([whether .eh_frame section should be read-only], [libffi_cv_ro_eh_frame], [
           		libffi_cv_ro_eh_frame=yes
           		echo 'extern void foo (void); void bar (void) { foo (); foo (); }' > conftest.c
           		if $CC $CFLAGS -c -fpic -fexceptions -fno-lto -o conftest.o conftest.c > /dev/null 2>&1; then
          EOF

      - name: Build APK with Buildozer
        run: |
          export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
          export ANDROID_HOME=$HOME/android-sdk
          export ANDROID_SDK_ROOT=$ANDROID_HOME
          export ANDROIDAPI=34
          export ANDROIDMINAPI=23
          export ANDROIDNDK=$ANDROID_HOME/ndk/26.3.11579264
          export PATH=$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$JAVA_HOME/bin:$PATH
          
          # Clear conflicting vars
          unset ANDROID_NDK_HOME ANDROID_NDK_ROOT ANDROID_NDK_LATEST_HOME
          
          # Set autotools environment
          export ACLOCAL_PATH="/usr/share/aclocal:/usr/local/share/aclocal"
          export LIBTOOLIZE="libtoolize"
          export M4PATH="/usr/share/aclocal"
          
          # Accept licenses
          yes | sdkmanager --licenses
          
          # Initialize buildozer
          buildozer init || true
          
          # Patch libffi before build
          if [ -d ".buildozer/android/platform/build-arm64-v8a_armeabi-v7a/build/other_builds/libffi" ]; then
            echo "Patching existing libffi..."
            find .buildozer -name "configure.ac" -path "*/libffi*" -exec patch -p1 -i /tmp/libffi-patches/fix-autoconf.patch {} \; || true
          fi
          
          # Run build with retries and libffi workaround
          for i in {1..3}; do
            echo "Build attempt $i..."
            if buildozer android debug --verbose; then
              echo "Build successful on attempt $i"
              break
            else
              echo "Build failed on attempt $i, trying libffi patch..."
              # Find and patch libffi if build fails
              find .buildozer -name "configure.ac" -path "*/libffi*" -exec patch -p1 -i /tmp/libffi-patches/fix-autoconf.patch {} \; || true
              find .buildozer -name "configure.ac" -path "*/libffi*" -execdir autoreconf -fiv \; || true
              if [ $i -eq 3 ]; then
                echo "All build attempts failed"
                exit 1
              fi
            fi
          done

      - name: List build output
        run: |
          echo "==== Searching for APKs ===="
          find . -name "*.apk" -type f || echo "No APK files found"
          ls -la bin/ || echo "No bin directory"
          ls -la .buildozer/android/platform/build*/outputs/apk/debug/ || echo "No debug APK directory"
          echo "============================"

      - name: Upload APK artifact (bin/)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: bin/*.apk
          if-no-files-found: ignore
          retention-days: 30

      - name: Upload APK artifact (build outputs)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: android-apk-alt
          path: .buildozer/android/platform/build*/outputs/apk/debug/*.apk
          if-no-files-found: ignore
          retention-days: 30

      - name: Upload build logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: |
            .buildozer/android/platform/build*/
            .buildozer/*.log
          if-no-files-found: ignore
          retention-days: 7
